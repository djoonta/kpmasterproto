// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: master.proto

package kpmasterproto

import (
	context "context"
	bank "github.com/djoonta/kpmasterproto/bank"
	encumbrance "github.com/djoonta/kpmasterproto/encumbrance"
	installment "github.com/djoonta/kpmasterproto/installment"
	occupation "github.com/djoonta/kpmasterproto/occupation"
	verification_status_reject "github.com/djoonta/kpmasterproto/verification_status_reject"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OccupationService_FindID_FullMethodName  = "/kpmasterproto.OccupationService/FindID"
	OccupationService_FindAll_FullMethodName = "/kpmasterproto.OccupationService/FindAll"
	OccupationService_Create_FullMethodName  = "/kpmasterproto.OccupationService/Create"
	OccupationService_Delete_FullMethodName  = "/kpmasterproto.OccupationService/Delete"
	OccupationService_Update_FullMethodName  = "/kpmasterproto.OccupationService/Update"
)

// OccupationServiceClient is the client API for OccupationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OccupationServiceClient interface {
	FindID(ctx context.Context, in *occupation.OccupationFindIDRequest, opts ...grpc.CallOption) (*occupation.OccupationFindIDResponse, error)
	FindAll(ctx context.Context, in *occupation.OccupationFindAllRequest, opts ...grpc.CallOption) (*occupation.OccupationFindAllResponse, error)
	Create(ctx context.Context, in *occupation.OccupationCreateRequest, opts ...grpc.CallOption) (*occupation.OccupationCreateResponse, error)
	Delete(ctx context.Context, in *occupation.OccupationDeleteRequest, opts ...grpc.CallOption) (*occupation.OccupationDeleteResponse, error)
	Update(ctx context.Context, in *occupation.OccupationUpdateRequest, opts ...grpc.CallOption) (*occupation.OccupationUpdateResponse, error)
}

type occupationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOccupationServiceClient(cc grpc.ClientConnInterface) OccupationServiceClient {
	return &occupationServiceClient{cc}
}

func (c *occupationServiceClient) FindID(ctx context.Context, in *occupation.OccupationFindIDRequest, opts ...grpc.CallOption) (*occupation.OccupationFindIDResponse, error) {
	out := new(occupation.OccupationFindIDResponse)
	err := c.cc.Invoke(ctx, OccupationService_FindID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupationServiceClient) FindAll(ctx context.Context, in *occupation.OccupationFindAllRequest, opts ...grpc.CallOption) (*occupation.OccupationFindAllResponse, error) {
	out := new(occupation.OccupationFindAllResponse)
	err := c.cc.Invoke(ctx, OccupationService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupationServiceClient) Create(ctx context.Context, in *occupation.OccupationCreateRequest, opts ...grpc.CallOption) (*occupation.OccupationCreateResponse, error) {
	out := new(occupation.OccupationCreateResponse)
	err := c.cc.Invoke(ctx, OccupationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupationServiceClient) Delete(ctx context.Context, in *occupation.OccupationDeleteRequest, opts ...grpc.CallOption) (*occupation.OccupationDeleteResponse, error) {
	out := new(occupation.OccupationDeleteResponse)
	err := c.cc.Invoke(ctx, OccupationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupationServiceClient) Update(ctx context.Context, in *occupation.OccupationUpdateRequest, opts ...grpc.CallOption) (*occupation.OccupationUpdateResponse, error) {
	out := new(occupation.OccupationUpdateResponse)
	err := c.cc.Invoke(ctx, OccupationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OccupationServiceServer is the server API for OccupationService service.
// All implementations must embed UnimplementedOccupationServiceServer
// for forward compatibility
type OccupationServiceServer interface {
	FindID(context.Context, *occupation.OccupationFindIDRequest) (*occupation.OccupationFindIDResponse, error)
	FindAll(context.Context, *occupation.OccupationFindAllRequest) (*occupation.OccupationFindAllResponse, error)
	Create(context.Context, *occupation.OccupationCreateRequest) (*occupation.OccupationCreateResponse, error)
	Delete(context.Context, *occupation.OccupationDeleteRequest) (*occupation.OccupationDeleteResponse, error)
	Update(context.Context, *occupation.OccupationUpdateRequest) (*occupation.OccupationUpdateResponse, error)
	mustEmbedUnimplementedOccupationServiceServer()
}

// UnimplementedOccupationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOccupationServiceServer struct {
}

func (UnimplementedOccupationServiceServer) FindID(context.Context, *occupation.OccupationFindIDRequest) (*occupation.OccupationFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindID not implemented")
}
func (UnimplementedOccupationServiceServer) FindAll(context.Context, *occupation.OccupationFindAllRequest) (*occupation.OccupationFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedOccupationServiceServer) Create(context.Context, *occupation.OccupationCreateRequest) (*occupation.OccupationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOccupationServiceServer) Delete(context.Context, *occupation.OccupationDeleteRequest) (*occupation.OccupationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOccupationServiceServer) Update(context.Context, *occupation.OccupationUpdateRequest) (*occupation.OccupationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOccupationServiceServer) mustEmbedUnimplementedOccupationServiceServer() {}

// UnsafeOccupationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OccupationServiceServer will
// result in compilation errors.
type UnsafeOccupationServiceServer interface {
	mustEmbedUnimplementedOccupationServiceServer()
}

func RegisterOccupationServiceServer(s grpc.ServiceRegistrar, srv OccupationServiceServer) {
	s.RegisterService(&OccupationService_ServiceDesc, srv)
}

func _OccupationService_FindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).FindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_FindID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).FindID(ctx, req.(*occupation.OccupationFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupationService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).FindAll(ctx, req.(*occupation.OccupationFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).Create(ctx, req.(*occupation.OccupationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).Delete(ctx, req.(*occupation.OccupationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).Update(ctx, req.(*occupation.OccupationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OccupationService_ServiceDesc is the grpc.ServiceDesc for OccupationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OccupationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kpmasterproto.OccupationService",
	HandlerType: (*OccupationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindID",
			Handler:    _OccupationService_FindID_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _OccupationService_FindAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OccupationService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OccupationService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OccupationService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}

const (
	InstallmentService_FindAll_FullMethodName = "/kpmasterproto.InstallmentService/FindAll"
	InstallmentService_FindID_FullMethodName  = "/kpmasterproto.InstallmentService/FindID"
	InstallmentService_Create_FullMethodName  = "/kpmasterproto.InstallmentService/Create"
	InstallmentService_Delete_FullMethodName  = "/kpmasterproto.InstallmentService/Delete"
	InstallmentService_Update_FullMethodName  = "/kpmasterproto.InstallmentService/Update"
)

// InstallmentServiceClient is the client API for InstallmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstallmentServiceClient interface {
	FindAll(ctx context.Context, in *installment.InstallmentFindAllRequest, opts ...grpc.CallOption) (*installment.InstallmentFindAllResponse, error)
	FindID(ctx context.Context, in *installment.InstallmentFindIDRequest, opts ...grpc.CallOption) (*installment.InstallmentFindIDResponse, error)
	Create(ctx context.Context, in *installment.InstallmentCreateRequest, opts ...grpc.CallOption) (*installment.InstallmentCreateResponse, error)
	Delete(ctx context.Context, in *installment.InstallmentDeleteRequest, opts ...grpc.CallOption) (*installment.InstallmentDeleteResponse, error)
	Update(ctx context.Context, in *installment.InstallmentUpdateRequest, opts ...grpc.CallOption) (*installment.InstallmentUpdateResponse, error)
}

type installmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallmentServiceClient(cc grpc.ClientConnInterface) InstallmentServiceClient {
	return &installmentServiceClient{cc}
}

func (c *installmentServiceClient) FindAll(ctx context.Context, in *installment.InstallmentFindAllRequest, opts ...grpc.CallOption) (*installment.InstallmentFindAllResponse, error) {
	out := new(installment.InstallmentFindAllResponse)
	err := c.cc.Invoke(ctx, InstallmentService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) FindID(ctx context.Context, in *installment.InstallmentFindIDRequest, opts ...grpc.CallOption) (*installment.InstallmentFindIDResponse, error) {
	out := new(installment.InstallmentFindIDResponse)
	err := c.cc.Invoke(ctx, InstallmentService_FindID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) Create(ctx context.Context, in *installment.InstallmentCreateRequest, opts ...grpc.CallOption) (*installment.InstallmentCreateResponse, error) {
	out := new(installment.InstallmentCreateResponse)
	err := c.cc.Invoke(ctx, InstallmentService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) Delete(ctx context.Context, in *installment.InstallmentDeleteRequest, opts ...grpc.CallOption) (*installment.InstallmentDeleteResponse, error) {
	out := new(installment.InstallmentDeleteResponse)
	err := c.cc.Invoke(ctx, InstallmentService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) Update(ctx context.Context, in *installment.InstallmentUpdateRequest, opts ...grpc.CallOption) (*installment.InstallmentUpdateResponse, error) {
	out := new(installment.InstallmentUpdateResponse)
	err := c.cc.Invoke(ctx, InstallmentService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallmentServiceServer is the server API for InstallmentService service.
// All implementations must embed UnimplementedInstallmentServiceServer
// for forward compatibility
type InstallmentServiceServer interface {
	FindAll(context.Context, *installment.InstallmentFindAllRequest) (*installment.InstallmentFindAllResponse, error)
	FindID(context.Context, *installment.InstallmentFindIDRequest) (*installment.InstallmentFindIDResponse, error)
	Create(context.Context, *installment.InstallmentCreateRequest) (*installment.InstallmentCreateResponse, error)
	Delete(context.Context, *installment.InstallmentDeleteRequest) (*installment.InstallmentDeleteResponse, error)
	Update(context.Context, *installment.InstallmentUpdateRequest) (*installment.InstallmentUpdateResponse, error)
	mustEmbedUnimplementedInstallmentServiceServer()
}

// UnimplementedInstallmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstallmentServiceServer struct {
}

func (UnimplementedInstallmentServiceServer) FindAll(context.Context, *installment.InstallmentFindAllRequest) (*installment.InstallmentFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedInstallmentServiceServer) FindID(context.Context, *installment.InstallmentFindIDRequest) (*installment.InstallmentFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindID not implemented")
}
func (UnimplementedInstallmentServiceServer) Create(context.Context, *installment.InstallmentCreateRequest) (*installment.InstallmentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInstallmentServiceServer) Delete(context.Context, *installment.InstallmentDeleteRequest) (*installment.InstallmentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInstallmentServiceServer) Update(context.Context, *installment.InstallmentUpdateRequest) (*installment.InstallmentUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedInstallmentServiceServer) mustEmbedUnimplementedInstallmentServiceServer() {}

// UnsafeInstallmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallmentServiceServer will
// result in compilation errors.
type UnsafeInstallmentServiceServer interface {
	mustEmbedUnimplementedInstallmentServiceServer()
}

func RegisterInstallmentServiceServer(s grpc.ServiceRegistrar, srv InstallmentServiceServer) {
	s.RegisterService(&InstallmentService_ServiceDesc, srv)
}

func _InstallmentService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment.InstallmentFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallmentService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).FindAll(ctx, req.(*installment.InstallmentFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_FindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment.InstallmentFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).FindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallmentService_FindID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).FindID(ctx, req.(*installment.InstallmentFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment.InstallmentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallmentService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).Create(ctx, req.(*installment.InstallmentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment.InstallmentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallmentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).Delete(ctx, req.(*installment.InstallmentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment.InstallmentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallmentService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).Update(ctx, req.(*installment.InstallmentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstallmentService_ServiceDesc is the grpc.ServiceDesc for InstallmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstallmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kpmasterproto.InstallmentService",
	HandlerType: (*InstallmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _InstallmentService_FindAll_Handler,
		},
		{
			MethodName: "FindID",
			Handler:    _InstallmentService_FindID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _InstallmentService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InstallmentService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _InstallmentService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}

const (
	EncumbranceService_FindAll_FullMethodName = "/kpmasterproto.EncumbranceService/FindAll"
	EncumbranceService_FindID_FullMethodName  = "/kpmasterproto.EncumbranceService/FindID"
	EncumbranceService_Create_FullMethodName  = "/kpmasterproto.EncumbranceService/Create"
	EncumbranceService_Delete_FullMethodName  = "/kpmasterproto.EncumbranceService/Delete"
	EncumbranceService_Update_FullMethodName  = "/kpmasterproto.EncumbranceService/Update"
)

// EncumbranceServiceClient is the client API for EncumbranceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncumbranceServiceClient interface {
	FindAll(ctx context.Context, in *encumbrance.EncumbranceFindAllRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceFindAllResponse, error)
	FindID(ctx context.Context, in *encumbrance.EncumbranceFindIDRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceFindIDResponse, error)
	Create(ctx context.Context, in *encumbrance.EncumbranceCreateRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceCreateResponse, error)
	Delete(ctx context.Context, in *encumbrance.EncumbranceDeleteRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceDeleteResponse, error)
	Update(ctx context.Context, in *encumbrance.EncumbranceUpdateRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceUpdateResponse, error)
}

type encumbranceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncumbranceServiceClient(cc grpc.ClientConnInterface) EncumbranceServiceClient {
	return &encumbranceServiceClient{cc}
}

func (c *encumbranceServiceClient) FindAll(ctx context.Context, in *encumbrance.EncumbranceFindAllRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceFindAllResponse, error) {
	out := new(encumbrance.EncumbranceFindAllResponse)
	err := c.cc.Invoke(ctx, EncumbranceService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encumbranceServiceClient) FindID(ctx context.Context, in *encumbrance.EncumbranceFindIDRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceFindIDResponse, error) {
	out := new(encumbrance.EncumbranceFindIDResponse)
	err := c.cc.Invoke(ctx, EncumbranceService_FindID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encumbranceServiceClient) Create(ctx context.Context, in *encumbrance.EncumbranceCreateRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceCreateResponse, error) {
	out := new(encumbrance.EncumbranceCreateResponse)
	err := c.cc.Invoke(ctx, EncumbranceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encumbranceServiceClient) Delete(ctx context.Context, in *encumbrance.EncumbranceDeleteRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceDeleteResponse, error) {
	out := new(encumbrance.EncumbranceDeleteResponse)
	err := c.cc.Invoke(ctx, EncumbranceService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encumbranceServiceClient) Update(ctx context.Context, in *encumbrance.EncumbranceUpdateRequest, opts ...grpc.CallOption) (*encumbrance.EncumbranceUpdateResponse, error) {
	out := new(encumbrance.EncumbranceUpdateResponse)
	err := c.cc.Invoke(ctx, EncumbranceService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncumbranceServiceServer is the server API for EncumbranceService service.
// All implementations must embed UnimplementedEncumbranceServiceServer
// for forward compatibility
type EncumbranceServiceServer interface {
	FindAll(context.Context, *encumbrance.EncumbranceFindAllRequest) (*encumbrance.EncumbranceFindAllResponse, error)
	FindID(context.Context, *encumbrance.EncumbranceFindIDRequest) (*encumbrance.EncumbranceFindIDResponse, error)
	Create(context.Context, *encumbrance.EncumbranceCreateRequest) (*encumbrance.EncumbranceCreateResponse, error)
	Delete(context.Context, *encumbrance.EncumbranceDeleteRequest) (*encumbrance.EncumbranceDeleteResponse, error)
	Update(context.Context, *encumbrance.EncumbranceUpdateRequest) (*encumbrance.EncumbranceUpdateResponse, error)
	mustEmbedUnimplementedEncumbranceServiceServer()
}

// UnimplementedEncumbranceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEncumbranceServiceServer struct {
}

func (UnimplementedEncumbranceServiceServer) FindAll(context.Context, *encumbrance.EncumbranceFindAllRequest) (*encumbrance.EncumbranceFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedEncumbranceServiceServer) FindID(context.Context, *encumbrance.EncumbranceFindIDRequest) (*encumbrance.EncumbranceFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindID not implemented")
}
func (UnimplementedEncumbranceServiceServer) Create(context.Context, *encumbrance.EncumbranceCreateRequest) (*encumbrance.EncumbranceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEncumbranceServiceServer) Delete(context.Context, *encumbrance.EncumbranceDeleteRequest) (*encumbrance.EncumbranceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEncumbranceServiceServer) Update(context.Context, *encumbrance.EncumbranceUpdateRequest) (*encumbrance.EncumbranceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEncumbranceServiceServer) mustEmbedUnimplementedEncumbranceServiceServer() {}

// UnsafeEncumbranceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncumbranceServiceServer will
// result in compilation errors.
type UnsafeEncumbranceServiceServer interface {
	mustEmbedUnimplementedEncumbranceServiceServer()
}

func RegisterEncumbranceServiceServer(s grpc.ServiceRegistrar, srv EncumbranceServiceServer) {
	s.RegisterService(&EncumbranceService_ServiceDesc, srv)
}

func _EncumbranceService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(encumbrance.EncumbranceFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncumbranceServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncumbranceService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncumbranceServiceServer).FindAll(ctx, req.(*encumbrance.EncumbranceFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncumbranceService_FindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(encumbrance.EncumbranceFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncumbranceServiceServer).FindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncumbranceService_FindID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncumbranceServiceServer).FindID(ctx, req.(*encumbrance.EncumbranceFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncumbranceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(encumbrance.EncumbranceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncumbranceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncumbranceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncumbranceServiceServer).Create(ctx, req.(*encumbrance.EncumbranceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncumbranceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(encumbrance.EncumbranceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncumbranceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncumbranceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncumbranceServiceServer).Delete(ctx, req.(*encumbrance.EncumbranceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncumbranceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(encumbrance.EncumbranceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncumbranceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncumbranceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncumbranceServiceServer).Update(ctx, req.(*encumbrance.EncumbranceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncumbranceService_ServiceDesc is the grpc.ServiceDesc for EncumbranceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncumbranceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kpmasterproto.EncumbranceService",
	HandlerType: (*EncumbranceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _EncumbranceService_FindAll_Handler,
		},
		{
			MethodName: "FindID",
			Handler:    _EncumbranceService_FindID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _EncumbranceService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EncumbranceService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EncumbranceService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}

const (
	BankService_FindAll_FullMethodName = "/kpmasterproto.BankService/FindAll"
	BankService_FindID_FullMethodName  = "/kpmasterproto.BankService/FindID"
	BankService_Create_FullMethodName  = "/kpmasterproto.BankService/Create"
	BankService_Delete_FullMethodName  = "/kpmasterproto.BankService/Delete"
	BankService_Update_FullMethodName  = "/kpmasterproto.BankService/Update"
)

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	FindAll(ctx context.Context, in *bank.BankFindAllRequest, opts ...grpc.CallOption) (*bank.BankFindAllResponse, error)
	FindID(ctx context.Context, in *bank.BankFindIDRequest, opts ...grpc.CallOption) (*bank.BankFindIDResponse, error)
	Create(ctx context.Context, in *bank.BankCreateRequest, opts ...grpc.CallOption) (*bank.BankCreateResponse, error)
	Delete(ctx context.Context, in *bank.BankDeleteRequest, opts ...grpc.CallOption) (*bank.BankDeleteResponse, error)
	Update(ctx context.Context, in *bank.BankUpdateRequest, opts ...grpc.CallOption) (*bank.BankUpdateResponse, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) FindAll(ctx context.Context, in *bank.BankFindAllRequest, opts ...grpc.CallOption) (*bank.BankFindAllResponse, error) {
	out := new(bank.BankFindAllResponse)
	err := c.cc.Invoke(ctx, BankService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) FindID(ctx context.Context, in *bank.BankFindIDRequest, opts ...grpc.CallOption) (*bank.BankFindIDResponse, error) {
	out := new(bank.BankFindIDResponse)
	err := c.cc.Invoke(ctx, BankService_FindID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Create(ctx context.Context, in *bank.BankCreateRequest, opts ...grpc.CallOption) (*bank.BankCreateResponse, error) {
	out := new(bank.BankCreateResponse)
	err := c.cc.Invoke(ctx, BankService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Delete(ctx context.Context, in *bank.BankDeleteRequest, opts ...grpc.CallOption) (*bank.BankDeleteResponse, error) {
	out := new(bank.BankDeleteResponse)
	err := c.cc.Invoke(ctx, BankService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Update(ctx context.Context, in *bank.BankUpdateRequest, opts ...grpc.CallOption) (*bank.BankUpdateResponse, error) {
	out := new(bank.BankUpdateResponse)
	err := c.cc.Invoke(ctx, BankService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility
type BankServiceServer interface {
	FindAll(context.Context, *bank.BankFindAllRequest) (*bank.BankFindAllResponse, error)
	FindID(context.Context, *bank.BankFindIDRequest) (*bank.BankFindIDResponse, error)
	Create(context.Context, *bank.BankCreateRequest) (*bank.BankCreateResponse, error)
	Delete(context.Context, *bank.BankDeleteRequest) (*bank.BankDeleteResponse, error)
	Update(context.Context, *bank.BankUpdateRequest) (*bank.BankUpdateResponse, error)
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (UnimplementedBankServiceServer) FindAll(context.Context, *bank.BankFindAllRequest) (*bank.BankFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedBankServiceServer) FindID(context.Context, *bank.BankFindIDRequest) (*bank.BankFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindID not implemented")
}
func (UnimplementedBankServiceServer) Create(context.Context, *bank.BankCreateRequest) (*bank.BankCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBankServiceServer) Delete(context.Context, *bank.BankDeleteRequest) (*bank.BankDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBankServiceServer) Update(context.Context, *bank.BankUpdateRequest) (*bank.BankUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s grpc.ServiceRegistrar, srv BankServiceServer) {
	s.RegisterService(&BankService_ServiceDesc, srv)
}

func _BankService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bank.BankFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).FindAll(ctx, req.(*bank.BankFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_FindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bank.BankFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).FindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_FindID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).FindID(ctx, req.(*bank.BankFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bank.BankCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Create(ctx, req.(*bank.BankCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bank.BankDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Delete(ctx, req.(*bank.BankDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bank.BankUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Update(ctx, req.(*bank.BankUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankService_ServiceDesc is the grpc.ServiceDesc for BankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kpmasterproto.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _BankService_FindAll_Handler,
		},
		{
			MethodName: "FindID",
			Handler:    _BankService_FindID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BankService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BankService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BankService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}

const (
	VerificationStatusRejectService_FindAll_FullMethodName = "/kpmasterproto.VerificationStatusRejectService/FindAll"
	VerificationStatusRejectService_FindID_FullMethodName  = "/kpmasterproto.VerificationStatusRejectService/FindID"
	VerificationStatusRejectService_Create_FullMethodName  = "/kpmasterproto.VerificationStatusRejectService/Create"
	VerificationStatusRejectService_Delete_FullMethodName  = "/kpmasterproto.VerificationStatusRejectService/Delete"
	VerificationStatusRejectService_Update_FullMethodName  = "/kpmasterproto.VerificationStatusRejectService/Update"
)

// VerificationStatusRejectServiceClient is the client API for VerificationStatusRejectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerificationStatusRejectServiceClient interface {
	FindAll(ctx context.Context, in *verification_status_reject.VerificationStatusRejectFindAllRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectFindAllResponse, error)
	FindID(ctx context.Context, in *verification_status_reject.VerificationStatusRejectFindIDRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectFindIDResponse, error)
	Create(ctx context.Context, in *verification_status_reject.VerificationStatusRejectCreateRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectCreateResponse, error)
	Delete(ctx context.Context, in *verification_status_reject.VerificationStatusRejectDeleteRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectDeleteResponse, error)
	Update(ctx context.Context, in *verification_status_reject.VerificationStatusRejectUpdateRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectUpdateResponse, error)
}

type verificationStatusRejectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVerificationStatusRejectServiceClient(cc grpc.ClientConnInterface) VerificationStatusRejectServiceClient {
	return &verificationStatusRejectServiceClient{cc}
}

func (c *verificationStatusRejectServiceClient) FindAll(ctx context.Context, in *verification_status_reject.VerificationStatusRejectFindAllRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectFindAllResponse, error) {
	out := new(verification_status_reject.VerificationStatusRejectFindAllResponse)
	err := c.cc.Invoke(ctx, VerificationStatusRejectService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationStatusRejectServiceClient) FindID(ctx context.Context, in *verification_status_reject.VerificationStatusRejectFindIDRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectFindIDResponse, error) {
	out := new(verification_status_reject.VerificationStatusRejectFindIDResponse)
	err := c.cc.Invoke(ctx, VerificationStatusRejectService_FindID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationStatusRejectServiceClient) Create(ctx context.Context, in *verification_status_reject.VerificationStatusRejectCreateRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectCreateResponse, error) {
	out := new(verification_status_reject.VerificationStatusRejectCreateResponse)
	err := c.cc.Invoke(ctx, VerificationStatusRejectService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationStatusRejectServiceClient) Delete(ctx context.Context, in *verification_status_reject.VerificationStatusRejectDeleteRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectDeleteResponse, error) {
	out := new(verification_status_reject.VerificationStatusRejectDeleteResponse)
	err := c.cc.Invoke(ctx, VerificationStatusRejectService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationStatusRejectServiceClient) Update(ctx context.Context, in *verification_status_reject.VerificationStatusRejectUpdateRequest, opts ...grpc.CallOption) (*verification_status_reject.VerificationStatusRejectUpdateResponse, error) {
	out := new(verification_status_reject.VerificationStatusRejectUpdateResponse)
	err := c.cc.Invoke(ctx, VerificationStatusRejectService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerificationStatusRejectServiceServer is the server API for VerificationStatusRejectService service.
// All implementations must embed UnimplementedVerificationStatusRejectServiceServer
// for forward compatibility
type VerificationStatusRejectServiceServer interface {
	FindAll(context.Context, *verification_status_reject.VerificationStatusRejectFindAllRequest) (*verification_status_reject.VerificationStatusRejectFindAllResponse, error)
	FindID(context.Context, *verification_status_reject.VerificationStatusRejectFindIDRequest) (*verification_status_reject.VerificationStatusRejectFindIDResponse, error)
	Create(context.Context, *verification_status_reject.VerificationStatusRejectCreateRequest) (*verification_status_reject.VerificationStatusRejectCreateResponse, error)
	Delete(context.Context, *verification_status_reject.VerificationStatusRejectDeleteRequest) (*verification_status_reject.VerificationStatusRejectDeleteResponse, error)
	Update(context.Context, *verification_status_reject.VerificationStatusRejectUpdateRequest) (*verification_status_reject.VerificationStatusRejectUpdateResponse, error)
	mustEmbedUnimplementedVerificationStatusRejectServiceServer()
}

// UnimplementedVerificationStatusRejectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVerificationStatusRejectServiceServer struct {
}

func (UnimplementedVerificationStatusRejectServiceServer) FindAll(context.Context, *verification_status_reject.VerificationStatusRejectFindAllRequest) (*verification_status_reject.VerificationStatusRejectFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedVerificationStatusRejectServiceServer) FindID(context.Context, *verification_status_reject.VerificationStatusRejectFindIDRequest) (*verification_status_reject.VerificationStatusRejectFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindID not implemented")
}
func (UnimplementedVerificationStatusRejectServiceServer) Create(context.Context, *verification_status_reject.VerificationStatusRejectCreateRequest) (*verification_status_reject.VerificationStatusRejectCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVerificationStatusRejectServiceServer) Delete(context.Context, *verification_status_reject.VerificationStatusRejectDeleteRequest) (*verification_status_reject.VerificationStatusRejectDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVerificationStatusRejectServiceServer) Update(context.Context, *verification_status_reject.VerificationStatusRejectUpdateRequest) (*verification_status_reject.VerificationStatusRejectUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVerificationStatusRejectServiceServer) mustEmbedUnimplementedVerificationStatusRejectServiceServer() {
}

// UnsafeVerificationStatusRejectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerificationStatusRejectServiceServer will
// result in compilation errors.
type UnsafeVerificationStatusRejectServiceServer interface {
	mustEmbedUnimplementedVerificationStatusRejectServiceServer()
}

func RegisterVerificationStatusRejectServiceServer(s grpc.ServiceRegistrar, srv VerificationStatusRejectServiceServer) {
	s.RegisterService(&VerificationStatusRejectService_ServiceDesc, srv)
}

func _VerificationStatusRejectService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(verification_status_reject.VerificationStatusRejectFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationStatusRejectServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerificationStatusRejectService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationStatusRejectServiceServer).FindAll(ctx, req.(*verification_status_reject.VerificationStatusRejectFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationStatusRejectService_FindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(verification_status_reject.VerificationStatusRejectFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationStatusRejectServiceServer).FindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerificationStatusRejectService_FindID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationStatusRejectServiceServer).FindID(ctx, req.(*verification_status_reject.VerificationStatusRejectFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationStatusRejectService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(verification_status_reject.VerificationStatusRejectCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationStatusRejectServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerificationStatusRejectService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationStatusRejectServiceServer).Create(ctx, req.(*verification_status_reject.VerificationStatusRejectCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationStatusRejectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(verification_status_reject.VerificationStatusRejectDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationStatusRejectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerificationStatusRejectService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationStatusRejectServiceServer).Delete(ctx, req.(*verification_status_reject.VerificationStatusRejectDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationStatusRejectService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(verification_status_reject.VerificationStatusRejectUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationStatusRejectServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerificationStatusRejectService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationStatusRejectServiceServer).Update(ctx, req.(*verification_status_reject.VerificationStatusRejectUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VerificationStatusRejectService_ServiceDesc is the grpc.ServiceDesc for VerificationStatusRejectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerificationStatusRejectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kpmasterproto.VerificationStatusRejectService",
	HandlerType: (*VerificationStatusRejectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _VerificationStatusRejectService_FindAll_Handler,
		},
		{
			MethodName: "FindID",
			Handler:    _VerificationStatusRejectService_FindID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _VerificationStatusRejectService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VerificationStatusRejectService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VerificationStatusRejectService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}
