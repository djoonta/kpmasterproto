// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: master.proto

package kpmasterproto

import (
	context "context"
	installment "github.com/djoonta/kpmasterproto/installment"
	occupation "github.com/djoonta/kpmasterproto/occupation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OccupationService_FindID_FullMethodName  = "/kpmasterproto.OccupationService/FindID"
	OccupationService_FindAll_FullMethodName = "/kpmasterproto.OccupationService/FindAll"
	OccupationService_Create_FullMethodName  = "/kpmasterproto.OccupationService/Create"
	OccupationService_Delete_FullMethodName  = "/kpmasterproto.OccupationService/Delete"
	OccupationService_Update_FullMethodName  = "/kpmasterproto.OccupationService/Update"
)

// OccupationServiceClient is the client API for OccupationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OccupationServiceClient interface {
	FindID(ctx context.Context, in *occupation.OccupationFindIDRequest, opts ...grpc.CallOption) (*occupation.OccupationFindIDResponse, error)
	FindAll(ctx context.Context, in *occupation.OccupationFindAllRequest, opts ...grpc.CallOption) (*occupation.OccupationFindAllResponse, error)
	Create(ctx context.Context, in *occupation.OccupationCreateRequest, opts ...grpc.CallOption) (*occupation.OccupationCreateResponse, error)
	Delete(ctx context.Context, in *occupation.OccupationDeleteRequest, opts ...grpc.CallOption) (*occupation.OccupationDeleteResponse, error)
	Update(ctx context.Context, in *occupation.OccupationUpdateRequest, opts ...grpc.CallOption) (*occupation.OccupationUpdateResponse, error)
}

type occupationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOccupationServiceClient(cc grpc.ClientConnInterface) OccupationServiceClient {
	return &occupationServiceClient{cc}
}

func (c *occupationServiceClient) FindID(ctx context.Context, in *occupation.OccupationFindIDRequest, opts ...grpc.CallOption) (*occupation.OccupationFindIDResponse, error) {
	out := new(occupation.OccupationFindIDResponse)
	err := c.cc.Invoke(ctx, OccupationService_FindID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupationServiceClient) FindAll(ctx context.Context, in *occupation.OccupationFindAllRequest, opts ...grpc.CallOption) (*occupation.OccupationFindAllResponse, error) {
	out := new(occupation.OccupationFindAllResponse)
	err := c.cc.Invoke(ctx, OccupationService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupationServiceClient) Create(ctx context.Context, in *occupation.OccupationCreateRequest, opts ...grpc.CallOption) (*occupation.OccupationCreateResponse, error) {
	out := new(occupation.OccupationCreateResponse)
	err := c.cc.Invoke(ctx, OccupationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupationServiceClient) Delete(ctx context.Context, in *occupation.OccupationDeleteRequest, opts ...grpc.CallOption) (*occupation.OccupationDeleteResponse, error) {
	out := new(occupation.OccupationDeleteResponse)
	err := c.cc.Invoke(ctx, OccupationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupationServiceClient) Update(ctx context.Context, in *occupation.OccupationUpdateRequest, opts ...grpc.CallOption) (*occupation.OccupationUpdateResponse, error) {
	out := new(occupation.OccupationUpdateResponse)
	err := c.cc.Invoke(ctx, OccupationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OccupationServiceServer is the server API for OccupationService service.
// All implementations must embed UnimplementedOccupationServiceServer
// for forward compatibility
type OccupationServiceServer interface {
	FindID(context.Context, *occupation.OccupationFindIDRequest) (*occupation.OccupationFindIDResponse, error)
	FindAll(context.Context, *occupation.OccupationFindAllRequest) (*occupation.OccupationFindAllResponse, error)
	Create(context.Context, *occupation.OccupationCreateRequest) (*occupation.OccupationCreateResponse, error)
	Delete(context.Context, *occupation.OccupationDeleteRequest) (*occupation.OccupationDeleteResponse, error)
	Update(context.Context, *occupation.OccupationUpdateRequest) (*occupation.OccupationUpdateResponse, error)
	mustEmbedUnimplementedOccupationServiceServer()
}

// UnimplementedOccupationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOccupationServiceServer struct {
}

func (UnimplementedOccupationServiceServer) FindID(context.Context, *occupation.OccupationFindIDRequest) (*occupation.OccupationFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindID not implemented")
}
func (UnimplementedOccupationServiceServer) FindAll(context.Context, *occupation.OccupationFindAllRequest) (*occupation.OccupationFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedOccupationServiceServer) Create(context.Context, *occupation.OccupationCreateRequest) (*occupation.OccupationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOccupationServiceServer) Delete(context.Context, *occupation.OccupationDeleteRequest) (*occupation.OccupationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOccupationServiceServer) Update(context.Context, *occupation.OccupationUpdateRequest) (*occupation.OccupationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOccupationServiceServer) mustEmbedUnimplementedOccupationServiceServer() {}

// UnsafeOccupationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OccupationServiceServer will
// result in compilation errors.
type UnsafeOccupationServiceServer interface {
	mustEmbedUnimplementedOccupationServiceServer()
}

func RegisterOccupationServiceServer(s grpc.ServiceRegistrar, srv OccupationServiceServer) {
	s.RegisterService(&OccupationService_ServiceDesc, srv)
}

func _OccupationService_FindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).FindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_FindID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).FindID(ctx, req.(*occupation.OccupationFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupationService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).FindAll(ctx, req.(*occupation.OccupationFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).Create(ctx, req.(*occupation.OccupationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).Delete(ctx, req.(*occupation.OccupationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(occupation.OccupationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OccupationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupationServiceServer).Update(ctx, req.(*occupation.OccupationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OccupationService_ServiceDesc is the grpc.ServiceDesc for OccupationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OccupationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kpmasterproto.OccupationService",
	HandlerType: (*OccupationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindID",
			Handler:    _OccupationService_FindID_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _OccupationService_FindAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OccupationService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OccupationService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OccupationService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}

const (
	InstallmentService_FindAll_FullMethodName = "/kpmasterproto.InstallmentService/FindAll"
)

// InstallmentServiceClient is the client API for InstallmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstallmentServiceClient interface {
	FindAll(ctx context.Context, in *installment.InstallmentFindAllRequest, opts ...grpc.CallOption) (*installment.InstallmentFindIDResponse, error)
}

type installmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallmentServiceClient(cc grpc.ClientConnInterface) InstallmentServiceClient {
	return &installmentServiceClient{cc}
}

func (c *installmentServiceClient) FindAll(ctx context.Context, in *installment.InstallmentFindAllRequest, opts ...grpc.CallOption) (*installment.InstallmentFindIDResponse, error) {
	out := new(installment.InstallmentFindIDResponse)
	err := c.cc.Invoke(ctx, InstallmentService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallmentServiceServer is the server API for InstallmentService service.
// All implementations must embed UnimplementedInstallmentServiceServer
// for forward compatibility
type InstallmentServiceServer interface {
	FindAll(context.Context, *installment.InstallmentFindAllRequest) (*installment.InstallmentFindIDResponse, error)
	mustEmbedUnimplementedInstallmentServiceServer()
}

// UnimplementedInstallmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstallmentServiceServer struct {
}

func (UnimplementedInstallmentServiceServer) FindAll(context.Context, *installment.InstallmentFindAllRequest) (*installment.InstallmentFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedInstallmentServiceServer) mustEmbedUnimplementedInstallmentServiceServer() {}

// UnsafeInstallmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallmentServiceServer will
// result in compilation errors.
type UnsafeInstallmentServiceServer interface {
	mustEmbedUnimplementedInstallmentServiceServer()
}

func RegisterInstallmentServiceServer(s grpc.ServiceRegistrar, srv InstallmentServiceServer) {
	s.RegisterService(&InstallmentService_ServiceDesc, srv)
}

func _InstallmentService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment.InstallmentFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallmentService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).FindAll(ctx, req.(*installment.InstallmentFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstallmentService_ServiceDesc is the grpc.ServiceDesc for InstallmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstallmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kpmasterproto.InstallmentService",
	HandlerType: (*InstallmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _InstallmentService_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}
